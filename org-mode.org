#+PROPERTY: header-args :tangle "./org-mode-tgl.el" :results output silent
#+OPTIONS: toc:3

#+NAME: org_gcr_2019-08-23T22-11-16-05-00_cosmicality_3B2E3D51-8D8D-4CAE-9A42-A9E9F16D9F02
#+BEGIN_SRC emacs-lisp :comments no
;; -*- lexical-binding: t; no-byte-compile: t; coding: utf-8 -*-
#+END_SRC

* Org-Mode
:PROPERTIES:
:ID:       org_gcr_2017-05-12_mara:D017621F-5169-442A-A52C-7D91EEB7D796
:END:
** Literate Programming
:PROPERTIES:
:ID:       org_gcr_2017-05-12_mara:CD4943EE-DE3D-4B3A-AB12-525580DC8EB7
:END:

When source blocks are evaluated, their results get stored in a result area,
typically for display. If the results are small, they are displayed with colons
instead of an =example= block. Instead, *always* place them in an
example block. This makes exports more consistent and other Org-Mode features seem
to behave more predictably.

#+NAME: org_gcr_2017-05-12_mara_9D21E326-1742-4DD0-BDF9-624D21873F92
#+BEGIN_SRC emacs-lisp
(setq org-babel-min-lines-for-block-output 0)
#+END_SRC

Configure Org-Mode to manage it's Source-Block backed buffers the same as the
rest of this system.

#+NAME: org_gcr_2017-05-12_mara_9427EB38-B623-4B99-B562-C2FD737EB0D7
#+BEGIN_SRC emacs-lisp
(setq org-edit-src-auto-save-idle-delay 0)
(setq org-edit-src-turn-on-auto-save nil)
#+END_SRC

Update in-buffer images after Source-Block execution. This is a programming task.
That is why it is under this heading and Evaluation. This is a setting configuring
how the results of evaluation are refreshed in EMACS.

#+NAME: org_gcr_2017-05-12_mara_780AFFD3-B8F3-4D0F-A3C1-DB30C2182730
#+BEGIN_SRC emacs-lisp
(defun gcr-org-babel-after-execute-hook ()
  "Settings for the `org-babel-after-execute-hook'."
  (interactive)
  (org-redisplay-inline-images))

(add-hook 'org-babel-after-execute-hook #'gcr-org-babel-after-execute-hook)
#+END_SRC

Never "automatically" evaluate a source block.

#+NAME: org_gcr_2017-05-12_mara_F0536A1B-195D-4AB9-90B8-D73651740849
#+BEGIN_SRC emacs-lisp
(setq org-confirm-babel-evaluate nil)
#+END_SRC

Make it unpleasant for Sysop to modify source-block outside of a source-block
backed buffer. The next step is to write some code to prevent modifying
source-blocks outside of that place.

#+NAME: org_gcr_2017-05-12_mara_B804AA93-9D3B-4DC8-BFA3-658DD1FB0601
#+BEGIN_SRC emacs-lisp
(setq org-src-tab-acts-natively nil)
#+END_SRC

** Workflow / TO-DO Objects
:PROPERTIES:
:ID:       org_gcr_2017-05-12_mara:0CFAE46B-8D06-48FB-8D7E-7B636C91D443
:END:

- Custom TODO workflow states requirements, each answering the following questions:
  - Version 01
    - What needs to be done? TODO
    - What is being done right now? IN-PROGRESS
    - What is waiting because an external agent? HELD-BLOCKED
    - What is waiting because I have put it on hold? HELD-FROZEN
    - What is waiting until another date? (although I'm not using the Agenda) HELD-UNTIL
    - What is complete and needs to be reviewed? REVIEW
    - What is complete? DONE
  - Version 02
    - Questions about every state
      - When was it created?
        - The purpose of its creation is contained within its Headline and its
          contents "when?" and "why?" aren't required
      - When was it changed and why?
        - The reason for the change is probably in the body of the Headline so
          why bother keeping a note here? Bother because it makes it easier to
          review the state-change of a task because
          - It probably isn't worth keeping in the task long-term (it is
            transient)
            - But it still matters and I want to know about it
          - If it is worth keeping in the task long-term then it will be there
            but
            - It makes it easier to review the modification of a task without
              - Having to re-read the entire task to understand the context
              - Track down the why it modified
      - When did it complete (done or not) and why?
        - The goals for completion are probably in the body of the Headline
          itself so why keeping a note here? Bother because it makes it easier
          to review the completion of a task without
          - Having to re-read the entire task to understand the context
          - Track down the why it completed
    - Migration from Version 01
      - TODO \rarr no change (timestamp)
      - IN-PROGRESS \rarr GO (timestamp) (not DO because of DONE fastkey)
      - HELD-BLOCKED \rarr WAIT with note (timestamp, explanation)
      - HELD-FROZEN \rarr WAIT with note (timestamp, explanation)
      - HELD-UNTIL \rarr WAIT with note (timestamp, explanation)
      - REVIEW \rarr no change (timestamp)
      - DONE \rarr no change (timestamp, explanation)
    - Workflow cheatsheet for every state change
      - Entry related
        - =!= store a timestamp when *entered*
        - =@= store a timestamp with a note when *entered*
          - =C-c C-c= provides an empty note
      - Exit related
        - =/!= *in addition* to the state's entry configuration
          - record a timestamp when *leaving*
          - /if and only if/
            - the target state not already configure logging when entering it
      - Access related
        - =char= defines a fast-access key for the state name

    #+NAME: org_gcr_2017-05-12_mara_9DE5CE12-157D-4516-9FB1-7DAFA02C571E
    #+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
      '((sequence
         "TODO(t!)" ; Initial creation
         "GO(g@)"; Work in progress
         "WAIT(w@)" ; My choice to pause task
         "BLOCKED(b@)" ; Not my choice to pause task
         "REVIEW(r!)" ; Inspect or Share Time
         "|" ; Remaining close task
         "DONE(d@)" ; Normal completion
         "CANCELED(c@)" ; Not going to od it
         "DUPLICATE(p@)" ; Already did it
         )))
    #+END_SRC

    - Reference
      - [[http://stackoverflow.com/questions/12262220/add-created-date-property-to-todos-in-org-mode][StackOverflow: Add CREATED date property to TODOs in org-mode]]
      - [[http://orgmode.org/org.html#Workflow-states][Org: 5.2.1 TODO keywords as workflow states]]
      - [[http://orgmode.org/org.html#Tracking-TODO-state-changes][5.3.2 Tracking TODO state changes]]

    It is easier to understand the history of a task by reading it in chronological
    order.

    #+NAME: org_gcr_2017-05-12_mara_B237C004-4827-4C39-A9B9-4D0FF9B01053
    #+BEGIN_SRC emacs-lisp
(setq org-log-states-order-reversed nil)
    #+END_SRC

    Make it easy to hide the state changes until I want to see them with a Drawer.

    #+NAME: org_gcr_2017-05-12_mara_32AAD797-A7D7-416D-9CE2-425EB96781A7
    #+BEGIN_SRC emacs-lisp
(setq org-log-into-drawer t)
    #+END_SRC

    Maintain state when archiving a heading.

    #+NAME: org_gcr_2017-05-12_mara_B6F42ECC-14C0-4C60-8E00-6BBF883B3043
    #+BEGIN_SRC emacs-lisp
(setq org-archive-mark-done nil)
    #+END_SRC

    Inline Tasks.

    #+name: org_gcr_2018-05-23T09-03-14-05-00_mara_E899B70E-F49F-4ADC-9C4C-819F1B40D5AE
    #+begin_src emacs-lisp
(require 'org-inlinetask)
    #+end_src

** Refile
:PROPERTIES:
:ID:       org_gcr_2017-05-12_mara:C09D993C-6E48-4C84-8460-585F0A10DA63
:END:

*** Context
:PROPERTIES:
:ID:       org_gcr_2017-05-12_mara:DFCC7C00-F3B3-4C35-BBE6-A5ADBB60326D
:END:

I wrote my first to-do list on a funeral home notepad. It was either that or
it was from the furniture store. My dad worked at both. The National Selected
Morticians logo sat somewhere on its pages. There wasn't much for me to note
back then and the notepad worked fine. When I got a little older I graduated
to a Mead spiral notebook. I wasn't organized and wasted space. When you tore
out the pages they made a mess. At home we had two computers over the years an
Apple 2E and then a IBM PC compatible. Mom used PFS Write on the 2E and I used
Notepad once in a while but my usage on both games. They were at home but they
were not my home. The mad was my home until college where I made two new
friends: Composition Book (CB) and Bill Joy's ~vi~. CB seemed like an elegant
upgrade from the Mead spiral but it didn't last. CB's lines were too tall and
the pages were too short, the worst of both worlds. The speckled black and
white covers were its most useful part which was it's beauty as no one would
ever have guessed. Compared to the Mead, the CB's were downright elegant. That
leaves ~vi~. Mrs. Marian Manyo prepared a handout to help us learn ~vi~. It was a
single page. ~SunOS~ was at a whopping version of 5.7 yet the handout left ink
on your finger suggesting that it a mimeograph instead of a Xerox that
deposited it into our awaiting writing fingers. It has seven commands that I
learned: open, close, save, close and save, insert and command mode. That
worked to store my todo list for years. This as before CVS usurped RCS so
backups were basic. My workflow had two states: existence and non-existence.
Simple. This well for another nineteen years. Until I followed the GTD
approach but in a simpler ad-hock form. Emacs was never part of my life
even when it lived next door to vi. Growing up on the cusp of beefy IDEs
living on puny desktops most schools weren't rooted in the tradition of LISP
and Emacs and I never joined it. Scheme got my attention though and it sucked
me into Emacs, but it didn't keep me. Twice I tried. Nope. Three times I tried
and at the end I liked Emacs a little bit worse. Then something funny happened:
I wanted to learn OCaml. Emacs was the only good editor for it, so I dug up
Emacs. Then I wanted to learn SML and go figure: Emacs was the only good
editor for it. The same story was retold ten or fifteen times. The proverbial
lotus kept expanding every time you touched because not only did satisfy your
ideas but it gave you new ones. Totally hooked, I am still keeping my todo
lists in ASCII text files. Then three years I heard about Org-Mode. My first
Org file had you guessed it: lists converted into headings. Oops, that wasn't
right so I converted them all to lists. That worked well for years. Then I got
interested in publishing and spent another year with headings and lists. A
year or so ago I got tired of my ad-hock workflow I checked if Org had a way
to deal with workflow. Of course it did! Then I got interested in tracking
state changes, and of course it had that. Beautiful. This whole story lives
here to introduce refile. When I moved headings I moved them by selecting the
whole subtree, killing it, and pasting it somewhere else. Fifteen or twenty
times I lost the heading. Sure VCS saved it but it was a hassle and a mess, a
total frustration. My error was not marking the entire subtree. Oops. When I
searched for a solution I ended up on the refile page. Of course that is how
you do it. Now /what/ was the /it/ that I wanted to do?

*** Desire
:PROPERTIES:
:ID:       org_gcr_2017-05-12_mara:E2BDFB86-4DCC-41BE-9F00-BFB085E547D6
:END:

Three or four Org-Mode files sit open in buffers for the entire year. Once in
a while there are new ones added but they usually replace one of the original
four. Exceptions are one-offs like provisioning scripts for my systems at work
or at home. Rarely a heading grows so large that it graduates to its own file.
This is by design: I refuse to pre-optimize and grow a menagerie files to
house every ever taxonomy conceivable only to end up retiring the file having
closed only a single heading.

Here is how my usage looks to me:
- 99.00% of the time I am working in the same three files
  - Refiling across subtrees at level two
- <00.90% of the time I am moving headings to level zero, or the top level of the
  document
- <00.09% of the time I am moving headings into a different file

  My predictable and small usage makes for an easy system configuration goal
  below.

*** Implementation
:PROPERTIES:
:ID:       org_gcr_2017-05-12_mara:BB186822-AFD2-4609-8CFB-DD7542E3D532
:END:

**** Core
:PROPERTIES:
:ID:       org_gcr_2017-05-12_mara:59F948C7-2606-4637-8EF6-4922BD231A9B
:END:

Because 99% of the time I will refile headings as sub-headings within the same
file I never need to configure =Refile= file targets in ~org-refile-targets~.
Refiling at any depth makes

#+NAME: org_gcr_2017-05-12_mara_DEE287C2-5B88-4015-9B4F-57DA0F922B0C
#+BEGIN_SRC emacs-lisp
(setq org-refile-targets '((nil . (:maxlevel . 10))))
(setq org-refile-use-outline-path t)
#+END_SRC

doing so natural, flexible and efficient

Because <90% I'm moving headings to level zero I want to
- Make it easy when I need it which is not often
- Make it difficult the rest of the time because I don't want to accidentally
  move headings there. It isn't the end of the world I just don't want to do
  it accidentally because I will be /rarely/ doing so in the first place.
- Single previx argument (4)

  Because <09% of the time I am moving headings into a new file
  - Make it as easy and a difficult as moving to the top-level
  - Prompt for the file name
    - If it does not exist ~Org~ will transparently create it
  - Perform the move
  - Single previx argument (16)

    #+NAME: org_gcr_2017-05-12_mara_7B11F38B-157A-400A-8F93-68E610D47128
    #+BEGIN_SRC emacs-lisp
(defun gcr-org-refile (arg)
  "Refile to /level/ in /file/ by using use /prefix args/: 2+/this/[none], 1+/this/1, 1/choose-file/2"
  (interactive "P")
  (cond
   ((not (null arg))
    (let ((val (car current-prefix-arg))
          (current-prefix-arg nil)
          (org-refile-use-outline-path 'file)
          (org-reverse-note-order nil))
      (cond ((= val 4)
             (call-interactively 'org-refile))
            ((= val 16)
             (let* ((fil (read-file-name "Enter destination file: "))
                    (xfil (expand-file-name fil))
                    (_ (when (not (file-exists-p xfil))
                         (with-temp-file xfil (insert))))
                    (org-refile-targets
                     `((,xfil :maxlevel . 10))))
               (progn (call-interactively 'org-refile)
                      (find-file xfil)))))))
   (t
    (call-interactively 'org-refile))))
    #+END_SRC

**** General Operation
:PROPERTIES:
:ID:       org_gcr_2017-05-12_mara:16842F15-40C2-4E68-83F2-EBD425569FCB
:END:

- Refiles are always coming from another headline to this headline. They are
  new and need to be prioritized. When they are in front it is easy to notice
  because your eyes go there first (even know you /are/ the one refiling)
  #+NAME: org_gcr_2017-05-12_mara_29930A09-6462-4BE7-9AE2-18DC1858666C
  #+BEGIN_SRC emacs-lisp
(setq org-reverse-note-order t)
  #+END_SRC
- Select headings with the full path immediately instead of with clunky
  depth-first navigation
  #+NAME: org_gcr_2017-05-12_mara_E0E01F45-C01E-4F6E-AE8D-1B0073ECB377
  #+BEGIN_SRC emacs-lisp
(setq org-outline-path-complete-in-steps nil)
  #+END_SRC
- Create a new parent heading destination first instead of using this GUI to
  do it because it is error prone to do it in the naviation GUI despite the
  available confirmation message
  #+NAME: org_gcr_2017-05-12_mara_07650079-9AE1-4291-97A3-BCFD0628C95D
  #+BEGIN_SRC emacs-lisp
(setq org-refile-allow-creating-parent-nodes nil)
  #+END_SRC
- Track refile operations to make sense of why the =Refile= occurred in the same
  spirit of how the workflow state changes are recorded
  #+NAME: org_gcr_2017-05-12_mara_7E513EE1-3EF9-415B-BB94-2135CBFB0E74
  #+BEGIN_SRC emacs-lisp
(setq org-log-refile 'note)
  #+END_SRC

** Properties
:PROPERTIES:
:ID:       org_gcr_2017-05-12_mara:D73BDF5F-AA12-4832-9B28-CADEC71D2B6C
:END:

Select a region, yank it, maybe choose a property under the current headline
and set it's value to the killed text.

#+NAME: org_gcr_2017-05-12_mara_1F938B98-B056-4381-833C-2C9B835B1C23
#+BEGIN_SRC emacs-lisp
(defun org-read-entry-property-name ()
  "Read a property name from the current entry."
  (let ((completion-ignore-case t)
        (default-prop (or (and (org-at-property-p)
                               (org-match-string-no-properties 2))
                          org-last-set-property)))
    (org-completing-read
     (format "Property [%s]: " (if default-prop default-prop ""))
     (org-entry-properties nil nil)
     nil nil nil nil default-prop)))

(defun gcr-org-region-to-property (&optional property)
  "Copies the region as value to an Org-mode property"
  (interactive)
  ;; if no region is defined, do nothing
  (if (use-region-p)
      ;; if a region string is found, ask for a property and set property to
      ;; the string in the region
      (let ((val (replace-regexp-in-string
                  "\\`[ \t\n]*" ""
                  (replace-regexp-in-string "[ \t\n]*\\'" ""
                                            (substring (buffer-string)
                                                       (- (region-beginning) 1)
                                                       (region-end))))
                 )
            ;; if none was stated by user, read property from user
            (prop (or property
                      (org-read-entry-property-name))))
        ;; set property
        (org-set-property prop val))))
#+END_SRC
** Tables
:PROPERTIES:
:ID:       org_gcr_2017-05-12_mara:862B1BEA-4FAD-4FA1-8666-39E2FFA2BB4F
:END:

Exports to TSV. CSV is too much of a pain for handling commas.

#+name: org_gcr_2018-05-17T22-08-31-05-00_mara_AE590C3B-9E70-4694-A2B1-B4EA164D36FB
#+begin_src emacs-lisp
(setq org-table-export-default-format "orgtbl-to-tsv")
#+end_src
** Publishing With TeX
:PROPERTIES:
:ID:       org_gcr_2018-03-07_mara:5C1154DE-B06C-444D-BB7B-32F0294BF64B
:END:
*** Engine
:PROPERTIES:
:ID:       org_gcr_2018-03-07_mara:BF9E72A9-58C7-4BD8-B0E3-60185434EADF
:END:
Use XeTeX.

#+name: org_gcr_2018-03-07_mara_D89CE4CB-12B1-47A6-9B0B-EA544343BA85
#+begin_src emacs-lisp
(setq org-latex-compiler "xelatex")
(setq org-latex-pdf-process '("latexmk -xelatex -quiet -shell-escape -f %f"))
#+end_src
*** Packages
:PROPERTIES:
:ID:       org_gcr_2018-03-07_mara:AE89B25B-486B-41BD-B3C5-C9499D93A4F2
:END:
**** Installation
:PROPERTIES:
:ID:       org_gcr_2018-04-28T19-58-14-05-00_mara:B51D7F56-0F8F-4206-8775-E6871618E28C
:END:

Remove packages helper.

#+NAME: org_gcr_2019-11-06T22-09-45-06-00_host1.org_C73482D2-DD9C-4C4E-A864-511B8FD9D83F
#+BEGIN_SRC emacs-lisp
(defun gcr-org-latex-remove-package (package)
  "Remove package PACKAGE from `org-latex-default-packages-alist' or error out."
  (interactive)
  (let* ((length-before (length org-latex-default-packages-alist))
         (new (seq-remove (lambda (elt) (equal (cadr elt) package))
                          org-latex-default-packages-alist))
         (length-after (length new))
         (worked (= length-after (- length-before 1))))
    (if worked
        (setq org-latex-default-packages-alist new)
      (error "Couldn't remove %s from org-latex-default-packages-alist."
             package))))
#+END_SRC

When I upgraded from MacTex-2018 to MacTex-2019 my signature wasn't included in OX-Koma letters anymore. Images loaded fine elsewhere but not in Koma letter. Bisecting the ~usepackage~ calls revealed that the issue appeard when =grffile= was included. Ironically that wast the last package loaded (the first being =graphicx=). The signature is important so I will remove =grffile= for now and pay attention to how any TeX builds go. It might be as easy as avoiding file names with spaces in them.

#+NAME: org_gcr_2019-11-06T22-09-45-06-00_host1.org_A1C5ABFF-B43A-4BF8-B78C-EFF6C40A3C20
#+BEGIN_SRC emacs-lisp
(gcr-org-latex-remove-package "grffile")
#+END_SRC

Packages sometimes require that they are loaded either before or after other packages. =hyperref= is one of them. It has to be loaded before every other package but for =letterpaper=. You can see in this source block the two lists named painfully verbosely to support this fact: ~gcr-org-latex-packages-alist-pre-hyperref~ for what must come before =hyperref= and
~gcr-org-latex-packages-alist-post-hyperref~ for what must come after. For that to work you have to remove =hyperref= from the default package list (which is only recommended if you really know what you are doing) then add it back in later.

Used code from [[https://github.com/kaushalmodi/.emacs.d/blob/master/setup-files/setup-org.el][here]].

#+name: org_gcr_2018-03-07_mara_C60306B4-7FB0-45AB-B39F-2BF47FA39604
#+begin_src emacs-lisp
(gcr-org-latex-remove-package "hyperref")
(defconst gcr-org-latex-packages-alist-pre-hyperref
  '(("letterpaper,margin=1.0in" "geometry")
    ("" "float")))
(defconst gcr-org-latex-packages-alist-post-hyperref
  '(("" "fontspec")
    ("section" "placeins")
    ("" "tikz")
    ("style=base" "caption")
    ("" "latexsym")
    ("" "lettrine")
    ("" "listings")
    ("" "color")
    ("" "fancyvrb")
    ("" "scrlayer-scrpage")
    ("" "lastpage")
    ("" "polyglossia")
    ("" "tabularx")
    ("" "tabu")
    ("" "grantcrettke")))
(setq org-latex-packages-alist
      (append gcr-org-latex-packages-alist-pre-hyperref
              '(("" "hyperref" nil))
              gcr-org-latex-packages-alist-post-hyperref))
#+end_src
**** Configuration
:PROPERTIES:
:ID:       org_gcr_2018-04-28T19-58-14-05-00_mara:8CC6E1C3-5300-4D9D-AB13-A064276342FB
:END:
#+name: org_gcr_2018-04-28T19-58-14-05-00_mara_50C0EEF0-A896-44B3-AC2B-0635552A723A
#+begin_src emacs-lisp
(setq org-latex-listings-options
      '(("basicstyle" "\\ttfamily")
        ("breakatwhitespace" "false")
        ("breakautoindent" "true")
        ("breaklines" "true")
        ("columns" "[c]fullflexible")
        ("commentstyle" "")
        ("emptylines" "*")
        ("extendedchars" "false")
        ("fancyvrb" "true")
        ("firstnumber" "auto")
        ("flexiblecolumns" "false")
        ("frame" "single")
        ("frameround" "tttt")
        ("identifierstyle" "")
        ("keepspaces" "true")
        ("keywordstyle" "")
        ("mathescape" "false")
        ("numbers" "left")
        ("numbers" "none")
        ("numbersep" "5pt")
        ("numberstyle" "\\tiny")
        ("resetmargins" "false")
        ("showlines" "true")
        ("showspaces" "false")
        ("showstringspaces" "false")
        ("showtabs" "true")
        ("stepnumber" "2")
        ("stringstyle" "")
        ("tab" "↹")
        ("tabsize" "4")
        ("texcl" "false")
        ("upquote" "false")))
#+end_src
*** Classes
:PROPERTIES:
:ID:       org_gcr_2018-03-07_mara:D397AC3E-DFED-4228-B8CD-7D62318414E9
:END:

Standard article class.

#+NAME: org_gcr_2017-05-12_mara_006EB5E3-5478-43C7-AEAC-34CCF49127AC
#+BEGIN_SRC emacs-lisp
(eval-after-load "ox-latex"
  '(add-to-list 'org-latex-classes
                '("help-article"
                  "\\documentclass[12pt]{article}")))

(setq org-latex-default-class "help-article")
#+END_SRC
*** Printing Source Code
:PROPERTIES:
:ID:       org_gcr_2018-04-28T19-58-14-05-00_mara:5CF00598-18B1-473C-804E-6A49AE8E0C51
:END:
#+name: org_gcr_2018-04-28T19-58-14-05-00_mara_C24D46F9-B35E-4D87-B47D-662D29F4173A
#+begin_src emacs-lisp
(setq org-latex-listings t)
#+end_src
*** Unclassified
:PROPERTIES:
:ID:       org_gcr_2018-03-07_mara:593C2BE0-5AD2-4654-B44B-C7F80F33F99A
:END:
Don't float images.

#+name: org_gcr_2018-03-07_mara_22B13787-67AA-4462-949B-3C1E6702EB7C
#+begin_src emacs-lisp
(setq org-latex-default-figure-position "H")
#+end_src
** Grammar
:PROPERTIES:
:ID:       org_gcr_2019-11-25T21-24-14-06-00_gsmac:503C2866-FC2A-4902-B8DE-05FC76CCA514
:END:
*** Spell Checking
:PROPERTIES:
:ID:       org_gcr_2017-05-12_mara:44909368-2D9A-40B9-A3F4-DF297A0EE570
:END:

Ispell is simple and powerful.

**** Org-Mode
:PROPERTIES:
:ID:       org_gcr_2017-05-12_mara:4892BEB5-C0B5-4506-BBB3-40E41F9E25FF
:END:

Never ispell the following objects.

Block regex helper.

#+NAME: org_gcr_2017-05-12_mara_5EDEEFA9-7DED-41D9-AD9D-5C48BA580AC5
#+BEGIN_SRC emacs-lisp
(defun gcr-org-block-regex (special)
  "Make an ispell skip-region alist for a SPECIAL block."
  (interactive)
  `(,(concat help/org-special-pre "BEGIN_" special)
    .
    ,(concat help/org-special-pre "END_" special)))
#+END_SRC

Source-Blocks.

#+NAME: org_gcr_2017-05-12_mara_D15F7E3E-9D35-4AB3-A043-67154E3D588A
#+BEGIN_SRC emacs-lisp
(add-to-list 'ispell-skip-region-alist (gcr-org-block-regex "SRC"))
#+END_SRC

Example-Blocks. This system often uses Source-Blocks to edit content and
Example-Blocks to make it easily renderable when it is not for running.

#+NAME: org_gcr_2017-05-12_mara_EB14B834-8486-4750-96C5-E5E3CFB4C19B
#+BEGIN_SRC emacs-lisp
(add-to-list 'ispell-skip-region-alist (gcr-org-block-regex "EXAMPLE"))
#+END_SRC

Properties.

#+NAME: org_gcr_2017-05-12_mara_F7E77F03-5A3E-4DC1-A345-4BE8E4C7FF11
#+BEGIN_SRC emacs-lisp
(add-to-list 'ispell-skip-region-alist '("^\s*:PROPERTIES\:$" . "^\s*:END\:$"))
#+END_SRC

Footnotes.

#+NAME: org_gcr_2017-05-12_mara_5459C549-E938-4899-827D-D03707983E52
#+BEGIN_SRC emacs-lisp
(add-to-list 'ispell-skip-region-alist '("\\[fn:.+:" . "\\]"))
#+END_SRC

Footnotes with URLs that contain line-breaks.

#+NAME: org_gcr_2017-05-12_mara_ECD4198B-7335-4141-8256-971748EE4D22
#+BEGIN_SRC emacs-lisp
(add-to-list 'ispell-skip-region-alist '("^http" . "\\]"))
#+END_SRC

Bold text list items.

#+NAME: org_gcr_2017-05-12_mara_1048E593-5E66-4F70-A591-B17A18634D8F
#+BEGIN_SRC emacs-lisp
(add-to-list 'ispell-skip-region-alist '("- \\*.+" . ".*\\*: "))
#+END_SRC

Right arrows.

#+NAME: org_gcr_2017-05-12_mara_5DB6D56D-1C05-4816-8BB6-8F3E936E5EFC
#+BEGIN_SRC emacs-lisp
(add-to-list 'ispell-skip-region-alist '("\\rarr"))
#+END_SRC

Check =SPECIAL LINE= definitions, ignoring their type.

#+NAME: org_gcr_2017-05-12_mara_5C415ECB-91FC-44C2-9886-29704EF74836
#+BEGIN_SRC emacs-lisp
(let ((names '(("ATTR_LATEX" nil)
               ("AUTHOR" nil)
               ("BLOG" nil)
               ("CREATOR" nil)
               ("DATE" nil)
               ("DESCRIPTION" nil)
               ("EMAIL" nil)
               ("EXCLUDE_TAGS" nil)
               ("HTML_CONTAINER" nil)
               ("HTML_DOCTYPE" nil)
               ("HTML_HEAD" nil)
               ("HTML_HEAD_EXTRA" nil)
               ("HTML_LINK_HOME" nil)
               ("HTML_LINK_UP" nil)
               ("HTML_MATHJAX" nil)
               ("INFOJS_OPT" nil)
               ("KEYWORDS" nil)
               ("LANGUAGE" nil)
               ("LATEX_CLASS" nil)
               ("LATEX_CLASS_OPTIONS" nil)
               ("LATEX_HEADER" nil)
               ("LATEX_HEADER_EXTRA" nil)
               ("NAME" t)
               ("OPTIONS" t)
               ("POSTID" nil)
               ("RESULTS" t)
               ("SELECT_TAGS" nil)
               ("STARTUP" nil)
               ("TITLE" nil))))
  (mapc (lambda (it)
          (add-to-list
           'ispell-skip-region-alist
           (let ((special (concat "#[+]" (car it) ":")))
             (if (cadr it)
                 (cons special "$")
               (list special)))))
        names))
#+END_SRC

** Unclassified
:PROPERTIES:
:ID:       org_gcr_2017-05-12_mara:FD7E89EA-72DC-4395-AE07-4CAA66B8BD28
:END:

When running in a GUI, I would like linked images to be displayed inside of
Emacs.

#+NAME: org_gcr_2017-05-12_mara_9A50B1B6-9446-4CE2-AC58-5ED8878E9041
#+BEGIN_SRC emacs-lisp
(setq org-startup-with-inline-images (display-graphic-p))
#+END_SRC

Org-Mode lets you use single letter commands to do stuff on headers. I like to
use =c= for cycling the header expansion.

#+NAME: org_gcr_2017-05-12_mara_C5BBF231-E413-4A62-9367-A25932090329
#+BEGIN_SRC emacs-lisp
(setq org-use-speed-commands t)
#+END_SRC

Ask before execution of shell links. This might seem like an Evaluation
activity. It is. It is interactive.

#+NAME: org_gcr_2017-05-12_mara_D874DF5C-61BE-4EF9-97F7-5C77927F8656
#+BEGIN_SRC emacs-lisp
(setq org-confirm-shell-link-function 'y-or-n-p)
#+END_SRC

Ask before execution of Emacs-Lisp.

#+NAME: org_gcr_2017-05-12_mara_7715C738-ADCF-4DA7-BB26-DF37B5A55460
#+BEGIN_SRC emacs-lisp
(setq org-confirm-elisp-link-function 'y-or-n-p)
#+END_SRC

Make sure that incomplete TODO entries prevent the enclosing parent from ever
turning to DONE.

#+NAME: org_gcr_2017-05-12_mara_40EE32EF-D461-4A4C-BDDA-5203A0EB5279
#+BEGIN_SRC emacs-lisp
(setq org-enforce-todo-dependencies t)
#+END_SRC

Allow the mouse to do Org-Mode things like expand and collapse headings.

#+NAME: org_gcr_2017-05-12_mara_065D8A70-E573-4204-B75B-B69F81926188
#+BEGIN_SRC emacs-lisp
(require 'org-mouse)
#+END_SRC

Use a real ellipsis to render an ellipsis for Org-Mode stuff like showing that a
header is collapsed. [[http://endlessparentheses.com/changing-the-org-mode-ellipsis.html?source=rss][Artur]] Artur go me thinking that an arrow would be more
expressive; in particular revealing that there is more content to be "unrolled"
below the current line.

#+NAME: org_gcr_2017-05-12_mara_BD01DD8A-9BA2-4240-8B63-6479D1C868CC
#+BEGIN_SRC emacs-lisp
(setq org-ellipsis "…")
#+END_SRC

It is easy to see indentation of headlines without having to count asterisks, so
don't show them, only show the significant and last one.

#+NAME: org_gcr_2017-05-12_mara_D567F41E-C336-402E-A1A3-EB8D4F91CBDC
#+BEGIN_SRC emacs-lisp
(setq org-hide-leading-stars t)
#+END_SRC

Maximize character space for writing. Do not indent according to the outline
node level because it would waste a lot of space. Ident the next body just like
any other text document.

#+NAME: org_gcr_2017-05-12_mara_95F90F5A-E6EB-43BE-9EF1-B3F0CCE4B331
#+BEGIN_SRC emacs-lisp
(setq org-adapt-indentation nil)
#+END_SRC

Display emphasized text as you would in a WYSIWYG editor.

#+NAME: org_gcr_2017-05-12_mara_563BB770-66CC-431C-98DE-BD3B5B5762AC
#+BEGIN_SRC emacs-lisp
(setq org-fontify-emphasized-text t)
#+END_SRC

Use Unicode characters to visualize things like right arrow eg \rarr . Most of those
symbols are correctly exported to the destination format. The most obvious is
this example in LaTeX versus Text.

#+NAME: org_gcr_2017-05-12_mara_5A4B6DC2-4F16-4177-9C8E-0D0CFDE2B24C
#+BEGIN_SRC emacs-lisp
(setq org-pretty-entities t)
#+END_SRC

Enable sub and super scripts *only* when wrapped in squiggly brackets.

#+NAME: org_gcr_2017-05-12_mara_6488365E-DF20-4300-A979-BA8CE807BBE4
#+BEGIN_SRC emacs-lisp
(setq org-use-sub-superscripts '{})
#+END_SRC

Highlight LaTeX and related markup.

Normally, I don't do any syntax highlighting, as I believe that should be
delegated to source buffers, thinking that to do otherwise is distracting.
However, I already do configure subscripts and Greek letters to be displayed
with syntax highlighting, because I want to indicate to the human reader that
they are special, and specifically /not/-Unicode. Do the same thing for LaTeX
and related markup.

#+NAME: org_gcr_2017-05-12_mara_8D163D72-07DD-42F2-93BA-9C70EC04D22F
#+BEGIN_SRC emacs-lisp
(setq org-highlight-latex-and-related '(latex script entities))
#+END_SRC

Allow "refactoring" of Footnotes between documents.

#+NAME: org_gcr_2017-05-12_mara_7A828354-84C9-42DE-B123-E9936D2CC914
#+BEGIN_SRC emacs-lisp
(setq org-footnote-define-inline t)
(setq org-footnote-auto-label 'random)
(setq org-footnote-auto-adjust nil)
(setq org-footnote-section nil)
#+END_SRC

This is an amazingly easy way to screw up your document. The more you edit
org docs, the more you realize how you must truly protect it.

#+NAME: org_gcr_2017-05-12_mara_C7174763-7D1F-491E-9395-8C4100AEA78D
#+BEGIN_SRC emacs-lisp
(setq org-catch-invisible-edits 'error)
#+END_SRC

Though I am not delving deep, it is hard not to want to customize some stuff
and perhaps this is the start. Even though I enabled this, I don't think that I
ever used it.

#+NAME: org_gcr_2017-05-12_mara_E8933212-1893-466F-95D1-BE41ADD2DD68
#+BEGIN_SRC emacs-lisp
(setq org-loop-over-headlines-in-active-region t)
#+END_SRC

It is /almost always/ faster to work with org documents when they are fully
expanded. Anyway, the structure cycling makes it really, really easy to get an
/outline view/ again.

#+NAME: org_gcr_2017-05-12_mara_018F43BF-99DA-4632-B5B0-A291CEBBA6B5
#+BEGIN_SRC emacs-lisp
(setq org-startup-folded "nofold")
#+END_SRC

When images are displayed in the buffer, display them in their actual size. As
the operator, I want to know their true form. Any modifications required for
export will be stated explicitly. Override this by setting
=#+ATTR_ORG: :width N= in the file.

#+NAME: org_gcr_2017-05-12_mara_85DCD661-A0DA-4AC2-8EB2-5BD9A4C2D0CB
#+BEGIN_SRC emacs-lisp
(setq org-image-actual-width t)
#+END_SRC

For emphasized text options is:Options is either to:
- Hide the delimeter. Otherwise Unicode characters break table alignment.
- Show the delimeter. Easy to evalute embedded Elisp.

#+NAME: org_gcr_2017-05-12_mara_2DD6E6FC-375C-4FA5-BFA4-C6C9B0EAB483
#+BEGIN_SRC emacs-lisp
(setq org-hide-emphasis-markers nil)
#+END_SRC

Realign tables automatically.

#+NAME: org_gcr_2017-05-12_mara_B5F4B79C-70AD-46D1-AAAF-A4E31091F9B2
#+BEGIN_SRC emacs-lisp
(setq org-startup-align-all-tables t)
#+END_SRC

Always use Unicode checkboxes.

#+NAME: org_gcr_2017-05-12_mara_75CA3C3E-CFA6-4FA5-98DA-7EC394781A17
#+BEGIN_SRC emacs-lisp
(setq org-html-checkbox-type 'unicode)
#+END_SRC

You may display syntax highlighting for code in source blocks. I don't.

#+NAME: org_gcr_2017-05-12_mara_F04CC035-CFB3-47DB-B1A0-9E58ECE5B01D
#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively nil)
#+END_SRC

When edit mode is exited, the option exists to automatically remove empty
opening and closed lines for the source block. Never do this. The thing is that
I forgot why. When I was working on a recent analysis with R there was a
space appearing in the opening and closing line of the source block that didn't
appear in the source editing buffer. That surprised me. I am sure that I've
forgotten why this is the case. I don't like it because you add a bunch of
empty lines in the source buffer for every source block. With that in mind I
will enable this feature and try it out again.

#+NAME: org_gcr_2017-05-12_mara_829BF364-D929-4B12-BFB7-82C6F4105CDA
#+BEGIN_SRC emacs-lisp
(setq org-src-strip-leading-and-trailing-blank-lines t)
#+END_SRC

The source block buffer may be configured to appear in a few different places.
For a while I really liked =reorganize-frame= because sometimes you want to be
able to see the code you are editing in edition to the rest of the document. At
least that is what I am telling myself. Once I learned you could change it I
realized that 1 I should have asked if it could be changed and 2 I should have
changed it. The flow that I've got configured here is that you are either in the
source document where code blocks are not highlighted or you are in the source
block so you are editing in a buffer that is full-fledged HELP. That is the best
way so you can focus completely on each task at hand in the ideal mode for that
task. Anything else results in distractions and errors.

#+NAME: org_gcr_2017-05-12_mara_A4769342-BBC0-40C1-B144-BD24CE74523C
#+BEGIN_SRC emacs-lisp
(setq org-src-window-setup 'current-window)
#+END_SRC

Org-Mode has a really nice feature that hitting =C-c C-c= will generally just do
the /right thing/. It is really nice. That feature extends to source blocks of
course. Ironically I had a typo here, typing /of curse/ instead of /of course/.
The thing is that you really, really need to develop a personal workflow, and
then configure the tool to enable it. The more I learn about Org-Mode, the more
leery I am about making it really easy to evaluate code. I want it to be a
really, really specific and decided action to evaluate a code block, so don't
make it so easy as =C-c C-c=.

#+NAME: org_gcr_2017-05-12_mara_7120E516-C6D1-4FD5-A925-7F79B3FE9323
#+BEGIN_SRC emacs-lisp
(setq org-babel-no-eval-on-ctrl-c-ctrl-c t)
#+END_SRC

Never use the original version.

#+NAME: org_gcr_2017-05-12_mara_1AE94FA9-77C0-4A30-8A70-AFAFD4E4011F
#+BEGIN_SRC emacs-lisp
(setq org-edit-src-code nil)
#+END_SRC
Let pretify minimize macro text.

#+NAME: org_gcr_2017-05-12_mara_258FD451-015B-4195-8349-8B4EFA61B581
#+BEGIN_SRC emacs-lisp
(setq org-hide-macro-markers nil)
#+END_SRC

Follow links without using the mouse or more.

#+NAME: org_gcr_2017-05-12_mara_7CFE23CC-8EBC-46F3-889F-BF36EC45D6CA
#+BEGIN_SRC emacs-lisp
(setq org-return-follows-link t)
#+END_SRC

In Org mode release 9.2 the template system was replaced by org-tempo. When I
switched back to Org mode release 9.0.9 I had to comment this out.

#+name: org_gcr_2018-06-15T10-59-11-05-00_mara_18E869DD-ECC4-4267-B019-CBACA6D89465
#+begin_src emacs-lisp :tangle no
(require 'org-tempo)
#+end_src

** Keybindings
:PROPERTIES:
:ID:       org_gcr_2017-05-12_mara:F5256DB3-BD52-409B-80CF-6E601A29AA4A
:END:

Started questioning why after hitting RETURN while in lists I have to hit TAB to
get indented properly. Kind of a dead giveaway that I should be
return-and-indenting! Looked at =org-return= to find that it has an argument
about indenting and then saw that =org-return-indent= passes it for you. With that
in mind, RETURN is bound to that now. Now HELP has four different kinds of
"returns" in Org in order of likelihood of usage:

- org-return-indent :: Make it really easy to work in existing list items,
     headings, and tables
     - This is listed first because I often go back to modify entries
     - <return> because it is used the most
- org-meta-return :: Make it really easy to add new list items, headings, and
     table contents
     - M-<return> because the binding comes with Org
- *newline* :: For when I want to break out of the default
               Org indentation to start working at the beginning of the line for example when
               I'm done working in a list or have just created a new heading
               - C-M-<return> because it is next step "lower" in the binding
- gcr-smart-open-line :: When I want to insert a new line between the current
     and next line then position the cursor correctly indented at the start of it.
     - s-<return> because it is that is the last place in the modifier key chain

     #+NAME: org_gcr_2017-05-12_mara_711B4205-DC28-4A35-B620-23AFD46E3973
     #+BEGIN_SRC emacs-lisp
(define-key org-mode-map (kbd "<return>") #'org-return-indent)
(define-key org-mode-map (kbd "C-M-<return>") #'newline)
     #+END_SRC

*** Row 4, 1...
:PROPERTIES:
:ID:       org_gcr_2017-05-12_mara:B493B118-37D7-4C49-B300-EFBBEF91F0D6
:END:

#+NAME: org_gcr_2017-05-12_mara_1A8FB05F-FF18-45DD-BFC4-89E76C366B9F
#+BEGIN_SRC emacs-lisp
(define-key org-mode-map (kbd "H-7") #'org-babel-load-in-session)
(define-key org-mode-map (kbd "H-8") #'org-babel-switch-to-session)
(define-key org-mode-map (kbd "H-*") #'org-babel-switch-to-session-with-code)
#+END_SRC

Easily manipulate lists and headlines staying close to home.

#+NAME: org_gcr_2017-05-12_mara_6BA97DBC-AE5D-4C60-AD03-EF150686A03F
#+BEGIN_SRC emacs-lisp
;; (progn
;;   (key-chord-define org-mode-map "y7" #'org-shifleft)
;;   (key-chord-define org-mode-map "Y&" #'org-shifup))
;; (progn
;;   (key-chord-define org-mode-map "u8" #'org-shiftmetaleft)
;;   (key-chord-define org-mode-map "U*" #'org-shiftmetaup)
;;   (key-chord-define org-mode-map "i9" #'org-shiftmetaright)
;;   (key-chord-define org-mode-map "I(" #'org-shiftmetadown))
;; (progn
;;   (key-chord-define org-mode-map "o0" #'org-shiftright)
;;   (key-chord-define org-mode-map "O)" #'org-shiftdown))
#+END_SRC

*** Row 3, Q...
:PROPERTIES:
:ID:       org_gcr_2017-05-12_mara:ADB2113A-6D9F-4145-9D78-1DDFE5A2C916
:END:


Release these bindings.

#+NAME: org_gcr_2019-02-22T23-11-36-06-00_cosmicality_138EE053-3BAE-45F5-B19B-B8FB19580AF3
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-M-t"))
#+END_SRC

#+NAME: org_gcr_2017-05-12_mara_49522E70-EE2D-4CF9-95D7-8E43524A469D
#+BEGIN_SRC emacs-lisp
(define-key org-mode-map (kbd "H-]") (lambda () (interactive)
                                       (message "Removing all source block resuls")
                                       (gcr-org-2every-src-block
                                        'org-babel-remove-result)
                                       (message "Done removing all source block results")))
(define-key org-mode-map (kbd "H-y") #'gcr-safb-org-babel-execute-buffer)
(define-key org-mode-map (kbd "H-u") #'gcr-safb-org-babel-execute-subtree)
(define-key org-mode-map (kbd "H-U") #'org-mark-ring-goto)
(define-key org-mode-map (kbd "H-i") #'org-babel-execute-src-block)
(define-key org-mode-map (kbd "H-I") #'org-table-insert-row)
(define-key org-mode-map (kbd "H-o") #'org-babel-remove-result-one-or-many)
(define-key org-mode-map (kbd "H-O") #'org-org-export-to-org)
(define-key org-mode-map (kbd "H-p") #'org-babel-execute-maybe)
(define-key org-mode-map (kbd "H-[") #'org-babel-remove-inline-result)
(defun gcr-unset-C-M-t ()
  (interactive)
  (local-unset-key (kbd "C-M-t")))
(add-hook 'org-mode-hook #'gcr-unset-C-M-t)
#+END_SRC

*** Row 2, A...
:PROPERTIES:
:ID:       org_gcr_2017-05-12_mara:AA97F835-E969-43E4-AC84-B3CF472B8726
:END:

#+NAME: org_gcr_2017-05-12_mara_EC7D6149-4451-443D-BFFF-1A40073D7D98
#+BEGIN_SRC emacs-lisp
(define-key org-mode-map (kbd "C-c C-k") nil)
(define-key org-mode-map (kbd "H-h") #'org-babel-tangle)
(define-key org-mode-map (kbd "H-j") #'org-babel-next-src-block)
(define-key org-mode-map (kbd "H-k") #'org-babel-previous-src-block)
(define-key org-mode-map (kbd "H-l") #'org-edit-src-code)
(define-key org-mode-map (kbd "H-;") #'gcr-safb-gcr-org-babel-demarcate-block)
(define-key org-mode-map (kbd "C->") #'(lambda () (interactive) (insert "\\rarr{}")))
(defun gcr-org-insert-subscript (arg)
  "Maybe insert a subscript with the postfix space."
  (interactive "MSubscript: ")
  (if (s-blank? arg)
      (message "Nothing to insert")
    (insert "_{" arg "} ")))
(defun gcr-org-insert-superscript (arg)
  "Maybe insert a super with the postfix space."
  (interactive "MSuperscript: ")
  (if (s-blank? arg)
      (message "Nothing to insert")
    (insert "^{" arg "} ")))
#+END_SRC

Because I only use this for Org-Mode.

#+NAME: org_gcr_2017-07-12_mara_65D0CDCC-66C7-4C81-ABF3-D22AAF71868E
#+BEGIN_SRC emacs-lisp
(define-key global-map (kbd "H-o") nil)
#+END_SRC

*** Row 1, Z...
:PROPERTIES:
:ID:       org_gcr_2017-05-12_mara:680824E4-2C0B-4E0F-BA6E-62AA84D484E4
:END:

#+NAME: org_gcr_2017-05-12_mara_8C00E3FE-4AE1-49BA-97E7-FAB2784DD0A9
#+BEGIN_SRC emacs-lisp
(define-key org-mode-map (kbd "H-n") #'org-babel-view-src-block-info)
(define-key org-mode-map (kbd "H-m") #'org-babel-expand-src-block)
(define-key org-mode-map (kbd "H-,") #'org-babel-open-src-block-result)
#+END_SRC

Because I only use this for Org-Mode.

#+NAME: org_gcr_2017-07-12_mara_97C70CDA-DFBF-4422-942A-00E732D3AB6A
#+BEGIN_SRC emacs-lisp
(define-key global-map (kbd "H-m") nil)
#+END_SRC

*** Hydra
:PROPERTIES:
:ID:       org_gcr_2017-05-12_mara:08A11E45-D41A-44D6-945D-45DF85F8D037
:END:

#+NAME: org_gcr_2017-05-12_mara_90AA8396-E8A0-439C-A1E4-373E90C4DC84
#+BEGIN_SRC emacs-lisp
;; ;; (defhydra gcr-hydra/right-side/org-mode (:color blue
;; :hint nil)
;; "
;; Org-Mode: (_q_uit)
;; Row 4: _1_ SHA-1-hash _2_ display images _3_ hide images _4_ id-create _8_ ltx/noindent
;; Row 3: _w_ ob-clip-formatted _e_ edit field  _E_ list entities _r_ gcr-org-refile _R_ insert \"refile\"  _t_oggle macro marker ATT_R_HTML 4 table export format _u_tf2xtx  _p_ copy-reg-2-property
;; Row 2: _a_ archive-subtree _s_ sort _S_ lobigst _d_ g2s-b/hd _g_ goto _k_ ob-check-src-blk _l_ lint _L_ insert inline task
;; Row 1: _z_ insert-superscript _Z_ insert-subscript _x_ tangled file permissions _c_ org-fill-para _C_ount words _b_ swtch2sessn _B_ NOrg2Blog _n_ n2sbtre _m_ mark-subtree"

;; ("q" org-babel-switch-to-session-with-code)

;; ;; Row 4
;; ("1" org-babel-sha1-hash)
;; ("2" org-display-inline-images)
;; ("3" org-remove-inline-images)
;; ("4" org-id-get-create)
;; ("8" (lambda () (interactive) (insert "@@latex:\\noindent{}@@")))

;; ;; Row 3
;; ("w" ox-clip-formatted-copy)
;; ("e" org-table-edit-field)
;; ("W" gcr-org-mark-subtree/kill-ring-save)
;; ("E" org-entities-help)
;; ("r" gcr-org-refile)
;; ("R" (lambda () (interactive) (insert "(refile)")))
;; ("t" gcr-org-toggle-macro-markers)
;; ("R" (lambda () (interactive) (insert "#+ATTR_HTML: :border 2 :rules all :frame border")))
;; ("u" org-utf-to-xetex-insert-or-wrap-with-macro)
;; ("p" gcr-org-region-to-property)

;; ;; TODO

;; ;; Row 2
;; ("a" org-archive-subtree-default)
;; ("s" org-sort)
;; ("S" org-babel-lob-ingest)
;; ("d" org-babel-goto-src-block-head)
;; ("g" org-goto)
;; ("i" org-babel-do-key-sequence-in-edit-buffer)
;; ("I" org-babel-insert-header-arg)
;; ("k" org-babel-check-src-block)
;; ("l" org-lint)
;; ("L" org-inlinetask-insert-task)

;; ;; Row 1
;; ("z" gcr-org-insert-superscript)
;; ("Z" gcr-org-insert-subscript)
;; ("x" gcr-org-insert-tangle-mode-permission)
;; ("c" org-fill-paragraph)
;; ("C" gcr-org-count-words)
;; ("b" org-babel-switch-to-session)
;; ("B" o2b-gui/body)
;; ("n" org-narrow-to-subtree)
;; ("m" org-mark-subtree)
;; ("M" org-mark-element))
;; (defun gcr-org-mark-subtree/kill-ring-save ()
;;   ""
;;   (interactive)
;;   (call-interactively 'org-mark-subtree)
;;   (call-interactively 'kill-ring-save))
;; (key-chord-define org-mode-map "hh" #'gcr-hydra/right-side/org-mode/body)
;; (defun gcr-org-insert-tangle-mode-permission ()
;;   (interactive)
;;   (insert ":tangle-mode (identity #o755)"))
#+END_SRC

Make =s-l= do the same thing to leave the Source-Block-Buffer.

#+NAME: org_gcr_2017-05-12_mara_5DE43FD1-AEF3-40D0-8C67-1ACBB6EA8317
#+BEGIN_SRC emacs-lisp
(define-key org-src-mode-map (kbd "H-l") #'org-edit-src-exit)
#+END_SRC

Easily enter guillemots.

#+NAME: org_gcr_2017-05-12_mara_BF73D071-57B8-4DBA-93E9-5A1D532A6321
#+BEGIN_SRC emacs-lisp
;; (key-chord-define org-mode-map "<<" (lambda () (interactive) (insert "\\laquo{}")))
;; (key-chord-define org-mode-map ">>" (lambda () (interactive) (insert "\\raquo{}")))
#+END_SRC

** Prettification
:PROPERTIES:
:ID:       org_gcr_2018-04-20T15-46-50-05-00_mara:356CA076-3E60-4908-BED1-DD7715C51C8C
:END:
Macro markers.

#+name: org_gcr_2018-06-21T13-13-25-05-00_mara_91DB03A0-F253-41EF-B3D7-820293D5AD94
#+begin_src emacs-lisp
(setq org-hide-macro-markers nil)
#+end_src

Prettifications.

#+name: org_gcr_2018-03-15_mara_05415B89-71CA-4176-80EF-FB36F2D97F20
#+begin_src emacs-lisp
(defun gcr-prettify-org-mode ()
  (interactive)
  (setq prettify-symbols-alist (gcr-alist-set "#+NAME\:" ?╭ prettify-symbols-alist))
  (setq prettify-symbols-alist (gcr-alist-set "#+name\:" ?╭ prettify-symbols-alist))
  (setq prettify-symbols-alist (gcr-alist-set "#+BEGIN_SRC" ?├ prettify-symbols-alist))
  (setq prettify-symbols-alist (gcr-alist-set "#+begin_src" ?├ prettify-symbols-alist))
  (setq prettify-symbols-alist (gcr-alist-set "#+END_SRC" ?╰ prettify-symbols-alist))
  (setq prettify-symbols-alist (gcr-alist-set "#+end_src" ?╰
                                              prettify-symbols-alist))
  (setq prettify-symbols-alist (gcr-alist-set "#+BEGIN_EXAMPLE" ?💡
                                              prettify-symbols-alist))
  (setq prettify-symbols-alist (gcr-alist-set "#+begin_example" ?💡
                                              prettify-symbols-alist))
  (setq prettify-symbols-alist (gcr-alist-set "#+END_EXAMPLE" ?💡
                                              prettify-symbols-alist))
  (setq prettify-symbols-alist (gcr-alist-set "#+end_example" ?💡
                                              prettify-symbols-alist))
  (setq prettify-symbols-alist (gcr-alist-set "#+BEGIN_QUOTE" ?🗣 prettify-symbols-alist))
  (setq prettify-symbols-alist (gcr-alist-set "#+begin_quote" ?🗣 prettify-symbols-alist))
  (setq prettify-symbols-alist (gcr-alist-set "#+END_QUOTE" ?🗣 prettify-symbols-alist))
  (setq prettify-symbols-alist (gcr-alist-set "#+end_quote" ?🗣
                                              prettify-symbols-alist))
  (setq prettify-symbols-alist (gcr-alist-set ":LOGBOOK:" ?🕮 prettify-symbols-alist))
  (gcr-prettify-org-mode-names))
(add-hook 'org-mode-hook #'gcr-prettify-org-mode)

(defun gcr-prettify-org-mode-names (&optional replacement)
  (interactive)
  (or replacement (setq replacement ?╮))
  (save-excursion
    (goto-char (point-min))
    (let ((case-fold-search t))
      (while (re-search-forward "#\\+name: " nil t)
        (copy-region-as-kill (point) (line-end-position))
        (let ((name (substring-no-properties(pop kill-ring))))
          (when (string-prefix-p "org_" name)
            (setq prettify-symbols-alist (gcr-alist-set name replacement prettify-symbols-alist))))))))
#+end_src

Custom font lock
- Hyphen appears as em-dash

  #+name: org_gcr_2018-06-14T14-15-42-05-00_mara_2F1F424E-F780-4D04-B582-7770987CC960
  #+begin_src emacs-lisp
(font-lock-add-keywords
 'org-mode
 '(("^[[:space:]]*\\(-\\) "
    0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "—")))))
  #+end_src

** HTML Exporter
:PROPERTIES:
:ID:       org_gcr_2018-07-02T07-07-57-05-00_mara:7236EDFF-7176-4C5F-842C-7919D3E73C28
:END:

Doctype—use the default.

~org-html-table-default-attributes~ (which are ignored in the ~HTML5~).
#+name: org_gcr_2018-07-02T07-07-57-05-00_mara_50C8A3C0-835D-4DE9-B5AE-161C127BF850
#+begin_src emacs-lisp :tangle no
(setq org-html-table-default-attributes
      (plist-put org-html-table-default-attributes :rules "all"))
(setq org-html-table-default-attributes
      (plist-put org-html-table-default-attributes :frame "border"))
#+end_src

** Hooks
:PROPERTIES:
:ID:       org_gcr_2019-01-14T09-58-00-06-00_cosmicality:A9834827-BB7D-4DA6-8AD0-F5733437C30F
:END:

#+name: org_gcr_2019-01-14T09-58-00-06-00_cosmicality_9D450653-5C54-48DB-B0A9-24E8408B0CF2
#+begin_src emacs-lisp
(defun gcr-org-mode-hook-fun ()
  (local-unset-key (kbd "C-j")))
(add-hook 'org-mode-hook #'org2blog-maybe-start)
#+end_src
** Publishing
:PROPERTIES:
:ID:       org_gcr_2017-05-12_mara:0A4A1510-41F7-4469-87D1-156D44A06216
:END:
*** KOMA-Script
:PROPERTIES:
:ID:       org_gcr_2017-05-12_mara:623E9A43-A969-48FD-9045-356F83B135E2
:END:

I enjoy writing letters. I enjoy reading letters. LaTeX produces letters that
are easy to print and read. Org provides a [[http://orgmode.org/worg/exporters/koma-letter-export.html][KOMA Script exporter]] for [[https://www.ctan.org/pkg/koma-script?lang%3Den][KOMA-script]].
The Org documentation mentions that the user should read the [[http://orgmode.org/cgit.cgi/org-mode.git/plain/contrib/lisp/ox-koma-letter.el][ox-koma-letter.el]]
header documentation.

The [[https://www.ctan.org/pkg/babel?lang%3Den][babel]] packages is mentioned in the Org documentation. The package
documentation explains that it should be used with LaTeX, but not XeTeX. Some
time ago I decided to stick with LaTeX. This decision needs documentation. This
system leans towards LuaTeX because of its Unicode support and sticks with
PDFLaTeX because of its broad acceptance. Those two goals are at odds with each
other.

Load the KOMA exporter.

#+NAME: org_gcr_2017-05-12_mara_C74104AA-A25C-4BE8-A7DD-99DEA240FF73
#+BEGIN_SRC emacs-lisp
(eval-after-load "ox" '(require 'ox-koma-letter))
#+END_SRC

- Understanding KOMA and how to use it
  - There are 4 ways to set letter metadata, listed "from the most specific to
    the most general" (not sure exactly what this statement means, and the conclusion of my notes tries to make sense of what is really going on here and what is the best way to do things)
    - Org option lines (ORG)
    - Separate Org latex classes (LTX)
    - Emacs Lisp variables (LISP)
    - Letter Class Option files (LCO)
- Notes and thoughts on the ways to use it
  - LTX
    - By following the setup directions, you do this, creating "help-letter" class
    - Familiar and easy if you already know LaTeX
      - At some point in your workflow, you *must* define a class to use, anyway
    - Very easy to do, just define the class template and set =org-koma-letter-default-class=
  - ORG
    - Simple way that makes it very easy to just focus on the document content
    - This metadata takes highest priority in the workflow
      - So you should set your typical defaults in LISP or LCO and customize it
        here. This is exactly what I wanted to know.
      - This lets you do your tweaking in each unique file while relying on the
        most common defaults defined elsewhere
  - LISP
    - Very familiar style of configuring things
  - LCO
    - LCO == Letter Class Option files
    - LCO files are TeX
    - They are included in the generated TeX source code from the letter
    - Gives *full* access to KOMA-Script
      - Big deal, because not everything is exposed through ORG or LISP
      - Also gives full access to any and all TeX and LaTeX code
    - LCO files are a KOMA-Script thing, so they are a LaTeX thing
    -
      #+begin_quote
      Letter metadata set in LCO files overwrites letter metadata set in Emacs
      variables but not letter metadata set in the Org file.
      #+end_quote
    - When you include multiple LCO files, they are evaluated LIFO. Properties
      are set as they first appear, and are not set again. Say you include
      "MyGeneralStuffForAnyLetter.lco" and then include
      "MyStuffSpecificToThisLetter.lco". The specific stuff will get set first.
      Then general stuff will get set last.
      - Surely there is a better way to phrase this. I will work on that.
- Recommendations
  - What is the easiest way to start using KOMA-Script based on what you know
    today?
  - If you don't know any of the approaches
    - Then choose between learning LaTeX and Org
  - If you only know LaTeX
    - Then you will use the LTX/LCO metadata approach
  - If you only know ORG
    - Then you will use the ORG metadata approach
  - If you only know ORG and LISP
    - Then you will use the LISP approach for general metadata and the ORG
      approach specific metadata
  - If you know LTX/LCO, ORG, and LISP
    - Then you have total flexibility
    - The fact is that
      - ORG settings always trump LTX/LCO and LISP
      - LISP settings are a subset of all of the settings available in
        KOMA-Script, so you will always have to fall back to LTX/LCO if you want
        to use unexposed features
      - LCO files are just plain old LaTeX, which you already know
    - So the best thing to do
      - Is to use ORG for letter-specific settings
      - And LTX for general settings
      - Everything is a lot simpler this way because
        - One less metadata approach to keep track of
        - All KOMA-Script features are present
        - Need to learn details of KOMA-Script package anyway

    Configure the default class.

    [[https://tex.stackexchange.com/questions/102922/how-can-i-get-us-letter-output-from-koma-scripts-scrlttr2-class][This]] post explains how to default the US letter size. That is the likely default
    for my printed correspondence.

    #+NAME: org_gcr_2017-05-12_mara_8A241D12-24B3-4C4C-AC99-B55954611025
    #+BEGIN_SRC emacs-lisp
(eval-after-load "ox-koma-letter"
  '(progn
     (add-to-list 'org-latex-classes
                  '("help-letter"
                    "\\documentclass[12pt, pagesize, UScommercial9]{scrlttr2}"))

     (setq org-koma-letter-default-class "help-letter")))
    #+END_SRC

    There are two formats for the letters: [[http://orgmode.org/w/?p%3Dworg.git%3Ba%3Dblob%3Bf%3Dexporters/koma-letter-new-example.org%3Bh%3D180a9a0e10dd8f7483a67946daf36732c316f821%3Bhb%3D180a9a0e10dd8f7483a67946daf36732c316f821][heading-based]] and [[http://orgmode.org/w/?p%3Dworg.git%3Ba%3Dblob%3Bf%3Dexporters/koma-letter-example.org%3Bh%3De21b8b00c3e895be9dd573d02ea84b08796296a3%3Bhb%3De21b8b00c3e895be9dd573d02ea84b08796296a3][property-based]].

    Set up my default LCO files.

    #+NAME: org_gcr_2017-05-12_mara_33A83D5A-E541-474C-AA0D-2E039EC74CDD
    #+BEGIN_SRC emacs-lisp
(setq org-koma-letter-class-option-file "KomaDefault")
    #+END_SRC

*** HTML
:PROPERTIES:
:ID:       org_gcr_2017-05-12_mara:5AE61C99-1862-456E-B6FA-44225675B208
:END:

Load Htmlize for HTML export.

#+NAME: org_gcr_2017-05-12_mara_62E6542A-B340-470A-B7E0-2F4438EBBAE9
#+BEGIN_SRC emacs-lisp
(setq org-html-htmlize-output-type htmlize-output-type)
#+END_SRC

*** ASCII
:PROPERTIES:
:ID:       org_gcr_2017-05-12_mara:7BEBFA9B-E445-41F3-ABC6-08AFB3020D30
:END:

#+NAME: org_gcr_2017-05-12_mara_41F8B285-650A-4394-8ECD-85C81181DF14
#+BEGIN_SRC emacs-lisp
(setq org-ascii-text-width 80)
(setq org-ascii-global-margin 0)
#+END_SRC
